'use strict';

var obsidian = require('obsidian');
var Fuse = require('fuse.js');
var Hangul = require('hangul-js');

const DEFAULT_SETTINGS = {
    fuzzyThreshold: 0.4,
    overrideQuickSwitcher: true,
};
class HangulIndex {
    constructor(plugin) {
        this.plugin = plugin;
        this.entries = [];
    }
    /** 볼트 전체 초기 색인 */
    async build() {
        const files = this.plugin.app.vault.getMarkdownFiles();
        this.entries = files.map((f) => this.toEntry(f));
        this.rebuildFuse();
    }
    /** 파일 이름이 바뀔 때마다 업데이트 */
    updateOnRename(file, oldPath) {
        const i = this.entries.findIndex((e) => e.path === oldPath);
        if (i > -1)
            this.entries.splice(i, 1, this.toEntry(file));
        else
            this.entries.push(this.toEntry(file));
        this.rebuildFuse();
    }
    /** 검색 */
    search(q) {
        const jamo = Hangul.disassemble(q).join('');
        return this.fuse.search(jamo).map((r) => r.item);
    }
    /* ---------- 내부 ---------- */
    toEntry(file) {
        const display = file.basename;
        return {
            display,
            jamo: Hangul.disassemble(display).join(''),
            path: file.path,
        };
    }
    rebuildFuse() {
        this.fuse = new Fuse(this.entries, {
            threshold: this.plugin.settings.fuzzyThreshold,
            keys: ['jamo', 'display'],
        });
    }
}
/* ---------- Quick Switcher 모달 ---------- */
class HangulSwitcher extends obsidian.FuzzySuggestModal {
    constructor(app, index) {
        super(app);
        this.index = index;
    }
    getItems() { return this.index.search(this.inputEl.value || ''); }
    getItemText(item) { return item.display; }
    onChooseItem(item) { this.app.workspace.openLinkText(item.path, '', false); }
}
/* ---------- [[ 링크 자동완성 ---------- */
class HangulLinkSuggest extends obsidian.EditorSuggest {
    constructor(app, index) {
        super(app);
        this.index = index;
    }
    onTrigger(cursor, editor) {
        const trigger = editor.getRange({ line: cursor.line, ch: cursor.ch - 2 }, cursor);
        if (trigger === '[[') {
            const file = this.app.workspace.getActiveFile();
            if (!file)
                return null;
            const context = {
                start: cursor,
                end: cursor,
                query: '',
                editor: editor,
                file: file
            };
            return context;
        }
        return null;
    }
    getSuggestions(ctx) {
        return this.index.search(ctx.query);
    }
    renderSuggestion(item, el) {
        el.textContent = item.display;
    }
    selectSuggestion(item) {
        if (this.context?.editor) {
            this.context.editor.replaceRange(item.display + ']]', this.context.start, this.context.end);
        }
    }
}
/* ---------- 플러그인 본체 ---------- */
class HangulSearchPlugin extends obsidian.Plugin {
    async onload() {
        /* 1) 설정 로드 */
        await this.loadSettings();
        /* 2) 색인 빌드 */
        this.index = new HangulIndex(this);
        await this.index.build();
        /* 3) 볼트 이벤트 감시 */
        this.registerEvent(this.app.vault.on('rename', (file, oldPath) => {
            if (file instanceof obsidian.TFile)
                this.index.updateOnRename(file, oldPath);
        }));
        /* 4) Quick Switcher 대체 */
        if (this.settings.overrideQuickSwitcher) {
            this.addCommand({
                id: 'hangul-quick-switcher',
                name: 'Hangul Quick Switcher',
                hotkeys: [{ modifiers: ['Mod'], key: 'o' }], // ⌘O
                callback: () => new HangulSwitcher(this.app, this.index).open(),
            });
        }
        /* 5) 링크 자동완성 */
        this.registerEditorSuggest(new HangulLinkSuggest(this.app, this.index));
        /* 6) (선택) 설정 탭 */
        this.addSettingTab(new (class extends obsidian.PluginSettingTab {
            constructor(app, plugin) {
                super(app, plugin);
                this.plugin = plugin;
            }
            display() {
                const { containerEl } = this;
                containerEl.empty();
                containerEl.createEl('h2', { text: 'Hangul Fuzzy Search Settings' });
                // TODO: threshold 슬라이더 등 추가
            }
        })(this.app, this));
    }
    /* ---------- 설정 load/save ---------- */
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }
    async saveSettings() { await this.saveData(this.settings); }
}

module.exports = HangulSearchPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsic3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBcHAsXG4gICAgRWRpdG9yLFxuICAgIEVkaXRvclBvc2l0aW9uLFxuICAgIEZ1enp5U3VnZ2VzdE1vZGFsLFxuICAgIFBsdWdpbixcbiAgICBQbHVnaW5TZXR0aW5nVGFiLFxuICAgIFRGaWxlLFxuICAgIEVkaXRvclN1Z2dlc3QsXG4gICAgRWRpdG9yU3VnZ2VzdENvbnRleHQsXG4gICAgfSBmcm9tICdvYnNpZGlhbic7XG4gIFxuICBpbXBvcnQgRnVzZSBmcm9tICdmdXNlLmpzJztcbiAgaW1wb3J0IEhhbmd1bCBmcm9tICdoYW5ndWwtanMnO1xuICBcbiAgLyogLS0tLS0tLS0tLSDsgqzsmqnsnpAg7ISk7KCVIC0tLS0tLS0tLS0gKi9cbiAgaW50ZXJmYWNlIEhhbmd1bFNlYXJjaFNldHRpbmdzIHtcbiAgICBmdXp6eVRocmVzaG9sZDogbnVtYmVyOyAgICAgICAvLyAwICjsl4TqsqkpIOKGlCAxICjripDsiqgpXG4gICAgb3ZlcnJpZGVRdWlja1N3aXRjaGVyOiBib29sZWFuO1xuICB9XG4gIFxuICBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBIYW5ndWxTZWFyY2hTZXR0aW5ncyA9IHtcbiAgICBmdXp6eVRocmVzaG9sZDogMC40LFxuICAgIG92ZXJyaWRlUXVpY2tTd2l0Y2hlcjogdHJ1ZSxcbiAgfTtcbiAgXG4gIC8qIC0tLS0tLS0tLS0g7IOJ7J24IC0tLS0tLS0tLS0gKi9cbiAgaW50ZXJmYWNlIEluZGV4RW50cnkge1xuICAgIGRpc3BsYXk6IHN0cmluZzsgICAvLyDrs7Tsl6zspIQg7J2066aEXG4gICAgamFtbzogc3RyaW5nOyAgICAgIC8vIOu2hO2VtOuQnCDsnpDrqqhcbiAgICBwYXRoOiBzdHJpbmc7ICAgICAgLy8g7YyM7J28IOqyveuhnFxuICB9XG4gIFxuICBjbGFzcyBIYW5ndWxJbmRleCB7XG4gICAgcHJpdmF0ZSBlbnRyaWVzOiBJbmRleEVudHJ5W10gPSBbXTtcbiAgICBwcml2YXRlIGZ1c2UhOiBGdXNlPEluZGV4RW50cnk+O1xuICBcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogSGFuZ3VsU2VhcmNoUGx1Z2luKSB7fVxuICBcbiAgICAvKiog67O87Yq4IOyghOyytCDstIjquLAg7IOJ7J24ICovXG4gICAgYXN5bmMgYnVpbGQoKSB7XG4gICAgICBjb25zdCBmaWxlcyA9IHRoaXMucGx1Z2luLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICB0aGlzLmVudHJpZXMgPSBmaWxlcy5tYXAoKGYpID0+IHRoaXMudG9FbnRyeShmKSk7XG4gICAgICB0aGlzLnJlYnVpbGRGdXNlKCk7XG4gICAgfVxuICBcbiAgICAvKiog7YyM7J28IOydtOumhOydtCDrsJTrgJQg65WM66eI64ukIOyXheuNsOydtO2KuCAqL1xuICAgIHVwZGF0ZU9uUmVuYW1lKGZpbGU6IFRGaWxlLCBvbGRQYXRoOiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLmVudHJpZXMuZmluZEluZGV4KChlKSA9PiBlLnBhdGggPT09IG9sZFBhdGgpO1xuICAgICAgaWYgKGkgPiAtMSkgdGhpcy5lbnRyaWVzLnNwbGljZShpLCAxLCB0aGlzLnRvRW50cnkoZmlsZSkpO1xuICAgICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaCh0aGlzLnRvRW50cnkoZmlsZSkpO1xuICAgICAgdGhpcy5yZWJ1aWxkRnVzZSgpO1xuICAgIH1cbiAgXG4gICAgLyoqIOqygOyDiSAqL1xuICAgIHNlYXJjaChxOiBzdHJpbmcpOiBJbmRleEVudHJ5W10ge1xuICAgICAgY29uc3QgamFtbyA9IEhhbmd1bC5kaXNhc3NlbWJsZShxKS5qb2luKCcnKTtcbiAgICAgIHJldHVybiB0aGlzLmZ1c2Uuc2VhcmNoKGphbW8pLm1hcCgocikgPT4gci5pdGVtKTtcbiAgICB9XG4gIFxuICAgIC8qIC0tLS0tLS0tLS0g64K067aAIC0tLS0tLS0tLS0gKi9cbiAgICBwcml2YXRlIHRvRW50cnkoZmlsZTogVEZpbGUpOiBJbmRleEVudHJ5IHtcbiAgICAgIGNvbnN0IGRpc3BsYXkgPSBmaWxlLmJhc2VuYW1lO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcGxheSxcbiAgICAgICAgamFtbzogSGFuZ3VsLmRpc2Fzc2VtYmxlKGRpc3BsYXkpLmpvaW4oJycpLFxuICAgICAgICBwYXRoOiBmaWxlLnBhdGgsXG4gICAgICB9O1xuICAgIH1cbiAgXG4gICAgcHJpdmF0ZSByZWJ1aWxkRnVzZSgpIHtcbiAgICAgIHRoaXMuZnVzZSA9IG5ldyBGdXNlKHRoaXMuZW50cmllcywge1xuICAgICAgICB0aHJlc2hvbGQ6IHRoaXMucGx1Z2luLnNldHRpbmdzLmZ1enp5VGhyZXNob2xkLFxuICAgICAgICBrZXlzOiBbJ2phbW8nLCAnZGlzcGxheSddLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIFxuICAvKiAtLS0tLS0tLS0tIFF1aWNrIFN3aXRjaGVyIOuqqOuLrCAtLS0tLS0tLS0tICovXG4gIGNsYXNzIEhhbmd1bFN3aXRjaGVyIGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8SW5kZXhFbnRyeT4ge1xuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcml2YXRlIGluZGV4OiBIYW5ndWxJbmRleCkge1xuICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgZ2V0SXRlbXMoKSAgICAgICAgICAgIHsgcmV0dXJuIHRoaXMuaW5kZXguc2VhcmNoKHRoaXMuaW5wdXRFbC52YWx1ZSB8fCAnJyk7IH1cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBJbmRleEVudHJ5KSAgICAgeyByZXR1cm4gaXRlbS5kaXNwbGF5OyB9XG4gICAgb25DaG9vc2VJdGVtKGl0ZW06IEluZGV4RW50cnkpICAgIHsgdGhpcy5hcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChpdGVtLnBhdGgsICcnLCBmYWxzZSk7IH1cbiAgfVxuICBcbiAgLyogLS0tLS0tLS0tLSBbWyDrp4Htgawg7J6Q64+Z7JmE7ISxIC0tLS0tLS0tLS0gKi9cbiAgY2xhc3MgSGFuZ3VsTGlua1N1Z2dlc3QgZXh0ZW5kcyBFZGl0b3JTdWdnZXN0PEluZGV4RW50cnk+IHtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBpbmRleDogSGFuZ3VsSW5kZXgpIHtcbiAgICAgIHN1cGVyKGFwcCk7XG4gICAgfVxuICBcbiAgICBvblRyaWdnZXIoY3Vyc29yOiBFZGl0b3JQb3NpdGlvbiwgZWRpdG9yOiBFZGl0b3IpOiBFZGl0b3JTdWdnZXN0Q29udGV4dCB8IG51bGwge1xuICAgICAgY29uc3QgdHJpZ2dlciA9IGVkaXRvci5nZXRSYW5nZSh7IGxpbmU6IGN1cnNvci5saW5lLCBjaDogY3Vyc29yLmNoIC0gMiB9LCBjdXJzb3IpO1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdbWycpIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuIG51bGw7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb250ZXh0ID0geyBcbiAgICAgICAgICBzdGFydDogY3Vyc29yLCBcbiAgICAgICAgICBlbmQ6IGN1cnNvciwgXG4gICAgICAgICAgcXVlcnk6ICcnLFxuICAgICAgICAgIGVkaXRvcjogZWRpdG9yLFxuICAgICAgICAgIGZpbGU6IGZpbGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIFxuICAgIGdldFN1Z2dlc3Rpb25zKGN0eDogRWRpdG9yU3VnZ2VzdENvbnRleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4LnNlYXJjaChjdHgucXVlcnkpO1xuICAgIH1cbiAgICByZW5kZXJTdWdnZXN0aW9uKGl0ZW06IEluZGV4RW50cnksIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgZWwudGV4dENvbnRlbnQgPSBpdGVtLmRpc3BsYXk7XG4gICAgfVxuICAgIHNlbGVjdFN1Z2dlc3Rpb24oaXRlbTogSW5kZXhFbnRyeSkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dD8uZWRpdG9yKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5lZGl0b3IucmVwbGFjZVJhbmdlKGl0ZW0uZGlzcGxheSArICddXScsIHRoaXMuY29udGV4dC5zdGFydCwgdGhpcy5jb250ZXh0LmVuZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICAvKiAtLS0tLS0tLS0tIO2UjOufrOq3uOyduCDrs7jssrQgLS0tLS0tLS0tLSAqL1xuICBleHBvcnQgZGVmYXVsdCBjbGFzcyBIYW5ndWxTZWFyY2hQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICAgIHNldHRpbmdzITogSGFuZ3VsU2VhcmNoU2V0dGluZ3M7XG4gICAgaW5kZXghOiBIYW5ndWxJbmRleDtcbiAgXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgLyogMSkg7ISk7KCVIOuhnOuTnCAqL1xuICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgXG4gICAgICAvKiAyKSDsg4nsnbgg67mM65OcICovXG4gICAgICB0aGlzLmluZGV4ID0gbmV3IEhhbmd1bEluZGV4KHRoaXMpO1xuICAgICAgYXdhaXQgdGhpcy5pbmRleC5idWlsZCgpO1xuICBcbiAgICAgIC8qIDMpIOuzvO2KuCDsnbTrsqTtirgg6rCQ7IucICovXG4gICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKCdyZW5hbWUnLCAoZmlsZSwgb2xkUGF0aCkgPT4ge1xuICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHRoaXMuaW5kZXgudXBkYXRlT25SZW5hbWUoZmlsZSwgb2xkUGF0aCk7XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgXG4gICAgICAvKiA0KSBRdWljayBTd2l0Y2hlciDrjIDssrQgKi9cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLm92ZXJyaWRlUXVpY2tTd2l0Y2hlcikge1xuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgIGlkOiAnaGFuZ3VsLXF1aWNrLXN3aXRjaGVyJyxcbiAgICAgICAgICBuYW1lOiAnSGFuZ3VsIFF1aWNrIFN3aXRjaGVyJyxcbiAgICAgICAgICBob3RrZXlzOiBbeyBtb2RpZmllcnM6IFsnTW9kJ10sIGtleTogJ28nIH1dLCAvLyDijJhPXG4gICAgICAgICAgY2FsbGJhY2s6ICgpID0+IG5ldyBIYW5ndWxTd2l0Y2hlcih0aGlzLmFwcCwgdGhpcy5pbmRleCkub3BlbigpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgXG4gICAgICAvKiA1KSDrp4Htgawg7J6Q64+Z7JmE7ISxICovXG4gICAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yU3VnZ2VzdChuZXcgSGFuZ3VsTGlua1N1Z2dlc3QodGhpcy5hcHAsIHRoaXMuaW5kZXgpKTtcbiAgXG4gICAgICAvKiA2KSAo7ISg7YOdKSDshKTsoJUg7YOtICovXG4gICAgICB0aGlzLmFkZFNldHRpbmdUYWIoXG4gICAgICAgIG5ldyAoY2xhc3MgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICAgICAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBwbHVnaW46IEhhbmd1bFNlYXJjaFBsdWdpbikge1xuICAgICAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaXNwbGF5KCkge1xuICAgICAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdIYW5ndWwgRnV6enkgU2VhcmNoIFNldHRpbmdzJyB9KTtcbiAgICAgICAgICAgIC8vIFRPRE86IHRocmVzaG9sZCDsiqzrnbzsnbTrjZQg65OxIOy2lOqwgFxuICAgICAgICAgIH1cbiAgICAgICAgfSkodGhpcy5hcHAsIHRoaXMpLFxuICAgICAgKTtcbiAgICB9XG4gIFxuICAgIC8qIC0tLS0tLS0tLS0g7ISk7KCVIGxvYWQvc2F2ZSAtLS0tLS0tLS0tICovXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gICAgfVxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHsgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTsgfVxuICB9Il0sIm5hbWVzIjpbIkZ1enp5U3VnZ2VzdE1vZGFsIiwiRWRpdG9yU3VnZ2VzdCIsIlBsdWdpbiIsIlRGaWxlIiwiUGx1Z2luU2V0dGluZ1RhYiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBcUJFLE1BQU0sZ0JBQWdCLEdBQXlCO0FBQzdDLElBQUEsY0FBYyxFQUFFLEdBQUc7QUFDbkIsSUFBQSxxQkFBcUIsRUFBRSxJQUFJO0NBQzVCLENBQUM7QUFTRixNQUFNLFdBQVcsQ0FBQTtBQUlmLElBQUEsV0FBQSxDQUFvQixNQUEwQixFQUFBO1FBQTFCLElBQU0sQ0FBQSxNQUFBLEdBQU4sTUFBTSxDQUFvQjtRQUh0QyxJQUFPLENBQUEsT0FBQSxHQUFpQixFQUFFLENBQUM7S0FHZTs7QUFHbEQsSUFBQSxNQUFNLEtBQUssR0FBQTtBQUNULFFBQUEsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDdkQsUUFBQSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUNwQjs7SUFHRCxjQUFjLENBQUMsSUFBVyxFQUFFLE9BQWUsRUFBQTtBQUN6QyxRQUFBLE1B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
